//#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <fcntl.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "xaxidma.h"
#include "xparameters.h"
#include "xdebug.h"

#if (!defined(DEBUG))
extern void xil_printf(const char *format, ...);
#endif

XAxiDma AxiDma;

/*
Reference website: http://www.cs.bham.ac.uk/~jxb/INC/nn.html
===========================================================
						README
===========================================================
Change training file and test file path to correct path
for smooth running of code
NUMPAT:     number of training data
NUMIN:      number of features
NUMHID:     number of hidden node
NUMOUT:     number of output node
NUMTEST:    number of testing data
*/


const char* trainPath = "C:\\Users\\klosey\\Desktop\\training_data.txt";
const char* testPath = "C:\\Users\\klosey\\Desktop\\test_data.txt";

#define DMA_DEV_ID        XPAR_AXIDMA_0_DEVICE_ID
#define DDR_BASE_ADDR        XPAR_DDR_MEM_BASEADDR

#ifndef DDR_BASE_ADDR
#warning CHECK FOR THE VALID DDR ADDRESS IN XPARAMETERS.H, \
  DEFAULT SET TO 0x01000000
#define MEM_BASE_ADDR        0x01000000
#else
#define MEM_BASE_ADDR        (DDR_BASE_ADDR + 0x1000000)
#endif

#define TX_BUFFER_BASE        (MEM_BASE_ADDR + 0x00100000)
#define RX_BUFFER_BASE        (MEM_BASE_ADDR + 0x00300000)
#define RX_BUFFER_HIGH        (MEM_BASE_ADDR + 0x004FFFFF)

#define NUMBER_OF_WORDS     400
#define NUMBER_OF_BYTES         NUMBER_OF_WORDS * 4
#define NUMBER_OF_TRANSFERS   1
#define TEST_START_VALUE    1

#define NUMPAT 150
#define NUMIN  13
#define NUMHID 10
#define NUMOUT 1
#define NUMTEST 28
#define MAX_INPUT 256
#define NUM_OUTPUT 3

#define rando() ((double)rand()/((double)RAND_MAX+1))

/*declare function*/
double readinput(double input[NUMPAT + 1][NUMIN + 1], double target[NUMPAT + 1][NUMOUT + 1]);
double test(double test_input[NUMTEST + 1][NUMIN + 1], double test_target[NUMTEST + 1][NUMOUT + 1],
	double SumH[NUMPAT + 1][NUMHID + 1], double WeightIH[NUMIN + 1][NUMHID + 1], double Hidden[NUMPAT + 1][NUMHID + 1],
	double SumO[NUMPAT + 1][NUMOUT + 1], double WeightHO[NUMHID + 1][NUMOUT + 1], double Output[NUMPAT + 1][NUMOUT + 1]);
int training(void);
int send_function();
int seperate();
int XAxiDma_SimplePollExample(u16 DeviceId);
static int CheckData(u32 cur_indx);

/*declare variable*/
int    i, j, k, p, np, op, ranpat[NUMPAT + 1], epoch;
double SumH[NUMPAT + 1][NUMHID + 1], WeightIH[NUMIN + 1][NUMHID + 1], Hidden[NUMPAT + 1][NUMHID + 1];
double SumO[NUMPAT + 1][NUMOUT + 1], WeightHO[NUMHID + 1][NUMOUT + 1], Output[NUMPAT + 1][NUMOUT + 1];
int WeightIH1[NUMIN + 1][NUMHID + 1], WeightHO1[NUMHID + 1][NUMOUT + 1],Test_input1[NUMPAT + 1][NUMIN + 1];
double Input[NUMPAT + 1][NUMIN + 1];
double Target[NUMPAT + 1][NUMOUT + 1];
double Test_input[NUMPAT + 1][NUMIN + 1];
double Test_target[NUMPAT + 1][NUMOUT + 1];
double DeltaO[NUMOUT + 1], SumDOW[NUMHID + 1], DeltaH[NUMHID + 1];
double DeltaWeightIH[NUMIN + 1][NUMHID + 1], DeltaWeightHO[NUMHID + 1][NUMOUT + 1];
double Error, eta = 0.5, alpha = 0.9, smallwt = 0.5;



int main()
{
	init_platform();
	printf("Begin\n\n\r");
	printf("please send training file\n\n\r");
	readinput(Input, Target);
	training();
	printf("please send test data\n\n");
	test(Test_input, Test_target, SumH, WeightIH, Hidden, SumO, WeightHO, Output);
	seperate();
	send_function();
	cleanup_platform();
}


int training() {
	for (j = 1; j <= NUMHID; j++) {    // initialize WeightIH and DeltaWeightIH
		for (i = 0; i <= NUMIN; i++) {
			DeltaWeightIH[i][j] = 0.0;
			WeightIH[i][j] = 2.0 * (rando() - 0.5) * smallwt;
		}
	}

	for (k = 1; k <= NUMOUT; k++) {    // initialize WeightHO and DeltaWeightHO
		for (j = 0; j <= NUMHID; j++) {
			DeltaWeightHO[j][k] = 0.0;
			WeightHO[j][k] = 2.0 * (rando() - 0.5) * smallwt;
		}
	}

	for (epoch = 0; epoch < 100000; epoch++) {    // iterate weight updates
		for (p = 1; p <= NUMPAT; p++) {    // randomize order of training patterns
			ranpat[p] = p;
		}
		for (p = 1; p <= NUMPAT; p++) {
			np = p + rando() * (NUMPAT + 1 - p);
			op = ranpat[p]; ranpat[p] = ranpat[np]; ranpat[np] = op;
		}
		Error = 0.0;
		for (np = 1; np <= NUMPAT; np++) {    // repeat for all the training patterns
			p = ranpat[np];
			for (j = 1; j <= NUMHID; j++) {    // compute hidden unit activations
				SumH[p][j] = WeightIH[0][j];
				for (i = 1; i <= NUMIN; i++) {
					SumH[p][j] += Input[p][i] * WeightIH[i][j];
				}
				Hidden[p][j] = 1.0 / (1.0 + exp(-SumH[p][j]));
			}
			for (k = 1; k <= NUMOUT; k++) {    // compute output unit activations and errors
				SumO[p][k] = WeightHO[0][k];
				for (j = 1; j <= NUMHID; j++) {
					SumO[p][k] += Hidden[p][j] * WeightHO[j][k];
				}
				Output[p][k] = 1.0 / (1.0 + exp(-SumO[p][k]));   // Sigmoidal Outputs
				//             Output[p][k] = SumO[p][k];      Linear Outputs
				Error += 0.5 * (Target[p][k] - Output[p][k]) * (Target[p][k] - Output[p][k]);   // SSE
				//              Error -= ( Target[p][k] * log( Output[p][k] ) + ( 1.0 - Target[p][k] ) * log( 1.0 - Output[p][k] ) ) ;    Cross-Entropy Error
				DeltaO[k] = (Target[p][k] - Output[p][k]) * Output[p][k] * (1.0 - Output[p][k]);   // Sigmoidal Outputs, SSE
				//              DeltaO[k] = Target[p][k] - Output[p][k];     Sigmoidal Outputs, Cross-Entropy Error
				//              DeltaO[k] = Target[p][k] - Output[p][k];     Linear Outputs, SSE
			}
			for (j = 1; j <= NUMHID; j++) {    // 'back-propagate' errors to hidden layer
				SumDOW[j] = 0.0;
				for (k = 1; k <= NUMOUT; k++) {
					SumDOW[j] += WeightHO[j][k] * DeltaO[k];
				}
				DeltaH[j] = SumDOW[j] * Hidden[p][j] * (1.0 - Hidden[p][j]);
			}
			for (j = 1; j <= NUMHID; j++) {     // update weights WeightIH
				DeltaWeightIH[0][j] = eta * DeltaH[j] + alpha * DeltaWeightIH[0][j];
				WeightIH[0][j] += DeltaWeightIH[0][j];
				for (i = 1; i <= NUMIN; i++) {
					DeltaWeightIH[i][j] = eta * Input[p][i] * DeltaH[j] + alpha * DeltaWeightIH[i][j];
					WeightIH[i][j] += DeltaWeightIH[i][j];
				}
			}
			for (k = 1; k <= NUMOUT; k++) {    // update weights WeightHO
				DeltaWeightHO[0][k] = eta * DeltaO[k] + alpha * DeltaWeightHO[0][k];
				WeightHO[0][k] += DeltaWeightHO[0][k];
				for (j = 1; j <= NUMHID; j++) {
					DeltaWeightHO[j][k] = eta * Hidden[p][j] * DeltaO[k] + alpha * DeltaWeightHO[j][k];
					WeightHO[j][k] += DeltaWeightHO[j][k];
				}
			}
		}
		//if( epoch%1000 == 0 ) fprintf(stdout, "\nEpoch %-5d :   Error = %f", epoch, Error) ;
		if (Error < 0.01) break;  // stop learning when 'near enough'
	}

	printf("EPOCH = %d\n\n", epoch);   // print network outputs
	printf("Error = %f\n\n", Error);
	printf("training completed\n\n");
	return 0;
}


double readinput(double input[NUMPAT + 1][NUMIN + 1], double target[NUMPAT + 1][NUMOUT + 1])
{
	int i, j;
	//FILE *fw = fopen(trainPath, "r");
	for (i = 1; i < NUMPAT + 1; i++)
	{
		for (j = 1; j < NUMOUT + 1; j++)
		{
			scanf("%lf", &target[i][j]);
			target[i][j] = target[i][j] / NUM_OUTPUT;
		}
		for (j = 1; j < NUMIN + 1; j++)
		{
			scanf("%lf", &input[i][j]);
			input[i][j] = input[i][j] / MAX_INPUT;
		}
	}
	printf("read training data successfully\n\n");
	//fclose(fw);
	return 0;
}


double test(double test_input[NUMTEST + 1][NUMIN + 1], double test_target[NUMTEST + 1][NUMOUT + 1],
	double SumH[NUMPAT + 1][NUMHID + 1], double WeightIH[NUMIN + 1][NUMHID + 1], double Hidden[NUMPAT + 1][NUMHID + 1],
	double SumO[NUMPAT + 1][NUMOUT + 1], double WeightHO[NUMHID + 1][NUMOUT + 1], double Output[NUMPAT + 1][NUMOUT + 1])
{
	int i, j, p, k = 0;
	double accuracy = 0.0;
	//FILE *fw = fopen(testPath, "r");
	for (i = 1; i < NUMTEST + 1; i++)
	{
		for (j = 1; j < NUMOUT + 1; j++)
		{
			scanf("%lf", &test_target[i][j]);
			test_target[i][j] = test_target[i][j] / NUM_OUTPUT;
		}
		for (j = 1; j < NUMIN + 1; j++)
		{
			scanf("%lf", &test_input[i][j]);
			test_input[i][j] = test_input[i][j] / MAX_INPUT;
		}
	}
	//fclose(fw);
	for (p = 1; p <= NUMTEST; p++) {
		for (j = 1; j <= NUMHID; j++) {    // compute hidden unit activations
			SumH[p][j] = WeightIH[0][j];
			//printf("WeightIH[0][%d] =  %.4f\n",j,WeightIH[0][j]);
			for (i = 1; i <= NUMIN; i++) {
				SumH[p][j] += test_input[p][i] * WeightIH[i][j];
				//printf("WeightIH[%d][%d]  %.4f\n",i,j,WeightIH[i][j]);
			}
			Hidden[p][j] = 1.0 / (1.0 + exp(-SumH[p][j]));
			//printf("SumH[%d][%d] =  %.4f    ",p,j,SumH[p][j]);
			//printf("Hidden[%d][%d] =  %.4f\n",p,j,Hidden[p][j]);
		}
		for (k = 1; k <= NUMOUT; k++) {    // compute output unit activations and errors
			SumO[p][k] = WeightHO[0][k];
			//printf("WeightHO[0][%d] =  %.4f\n",k,WeightHO[0][k]);
			for (j = 1; j <= NUMHID; j++) {
				SumO[p][k] += Hidden[p][j] * WeightHO[j][k];
			}
			Output[p][k] = 1.0 / (1.0 + exp(-SumO[p][k]));
			//printf("Output[%d][%d] =  %.4f\n\n",p,k,Output[p][k]);
		}
	}
	// print full test data and prediction

	printf("\ntestdata\t") ;
	for( k = 1 ; k <= NUMOUT ; k++ ) {
		printf("Target%d\t  Output%d\t", k, k) ;
	}
	for( p = 1 ; p <= NUMTEST ; p++ ) {
		printf("\n   %d\t", p) ;
		for( k = 1 ; k <= NUMOUT ; k++ ) {
			printf("      %g\t    %.2f\t", NUM_OUTPUT * test_target[p][k], NUM_OUTPUT * Output[p][k]) ;
		}
	}


	// print accuracy only
	for (p = 1; p <= NUMTEST; p++) {
		for (k = 1; k <= NUMOUT; k++) {
			if (NUM_OUTPUT * test_target[p][k] == round(NUM_OUTPUT * Output[p][k])) {
				accuracy += 1.0;
			}
		}
	}
	printf("\nAccuracy: %.2f %%\n", 100 * accuracy / NUMTEST);

	return 0;
}


int send_function()
{
  int Status;
  xil_printf("\r\n--- Entering main() --- \r\n");

  /* Run the poll example for simple transfer */
  Status = XAxiDma_SimplePollExample(DMA_DEV_ID);

  if (Status != XST_SUCCESS) {

    xil_printf("XAxiDma_SimplePollExample: Failed\r\n");
    return XST_FAILURE;
  }

  xil_printf("\nXAxiDma_SimplePollExample: Passed\r\n");

  xil_printf("--- Exiting main() --- \r\n");

  return XST_SUCCESS;

}



int XAxiDma_SimplePollExample(u16 DeviceId)
{
  XAxiDma_Config *CfgPtr;
  int Status;
  u32 Index;
  u32 *TxBufferPtr;
  u32 *RxBufferPtr;


  TxBufferPtr = (u32 *)TX_BUFFER_BASE ;
  RxBufferPtr = (u32 *)RX_BUFFER_BASE;

  /* Initialize the XAxiDma device.
   */
  CfgPtr = XAxiDma_LookupConfig(DeviceId);
  if (!CfgPtr) {
    xil_printf("No config found for %d\r\n", DeviceId);
    return XST_FAILURE;
  }
  xil_printf("\nFound config for AXI DMA\n\r");

  Status = XAxiDma_CfgInitialize(&AxiDma, CfgPtr);
  if (Status != XST_SUCCESS) {
    xil_printf("Initialization failed %d\r\n", Status);
    return XST_FAILURE;
  }
  xil_printf("\nFinish initializing configurations for AXI DMA\n\r");

  if(XAxiDma_HasSg(&AxiDma)){
    xil_printf("Device configured as SG mode \r\n");
    return XST_FAILURE;
  }
  xil_printf("\nAXI DMA is configured as Simple Transfer mode\r\n");

  /* Disable interrupts, we use polling mode
   */
  XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK,
      XAXIDMA_DEVICE_TO_DMA);
  XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK,
      XAXIDMA_DMA_TO_DEVICE);


Index = 0;

for(i = 1; i < NUMTEST + 1; i++)
	for(j = 1; j < NUMIN + 1; j++)
	{
		//printf("Test_input[%d][%d]%d\n",i,j,Test_input1[i][j]);
		TxBufferPtr[Index] = Test_input1[i][j];
		//TxBufferPtr[Index] = 0.0625*i*1024;
		Index ++;
	}

for(i = 0; i < NUMIN + 1; i++)
	for(j = 1; j < NUMHID + 1; j++)
	{
		//printf(" WeightIH1[%d][%d]%d\n",i,j,WeightIH1[i][j]);
		TxBufferPtr[Index] = WeightIH1[i][j];
		//TxBufferPtr[Index] = 1024*16;
		Index ++;
	}

for(i = 0; i < NUMHID + 1; i++)
	for(j = 1; j < NUMOUT + 1; j++)
	{
		TxBufferPtr[Index] = WeightHO1[i][j];
		//TxBufferPtr[Index] = 1024*16;
		Index ++;
	}

  /* Flush the SrcBuffer before the DMA transfer, in case the Data Cache
   * is enabled
   */
  Xil_DCacheFlushRange((u32)TxBufferPtr, NUMBER_OF_BYTES);

  for(Index = 0; Index < NUMBER_OF_TRANSFERS; Index ++) {

    Status = XAxiDma_SimpleTransfer(&AxiDma,(u32) (RxBufferPtr + Index * 4),
    		29 * 4, XAXIDMA_DEVICE_TO_DMA);

    if (Status != XST_SUCCESS) {
      return XST_FAILURE;
    }


    Status = XAxiDma_SimpleTransfer(&AxiDma,(u32) (TxBufferPtr + Index * 4),
    		515 * 4, XAXIDMA_DMA_TO_DEVICE);

    if (Status != XST_SUCCESS) {
      return XST_FAILURE;
    }

    xil_printf("\nWaiting for AXI DMA \n\r");

    while (XAxiDma_Busy(&AxiDma,XAXIDMA_DMA_TO_DEVICE)) {
    	//wait
    }
    xil_printf("\nDMA_TO_DEVICE finishes \n\r");

    while (XAxiDma_Busy(&AxiDma,XAXIDMA_DEVICE_TO_DMA)) {
      //wait
    }
    xil_printf("\nDEVICE_TO_DMA finishes \n\r");

    Status = CheckData(Index);
    if (Status != XST_SUCCESS) {
      return XST_FAILURE;
    }

  }

  return XST_SUCCESS;
}

static int CheckData(u32 cur_indx)
{
  u32 *RxPacket;
  int Index = 0;

  RxPacket = (u32 *) (RX_BUFFER_BASE + cur_indx * 4 * 4);

  Xil_DCacheInvalidateRange((u32)RxPacket, NUMBER_OF_BYTES);

  for(Index = 0; Index < 30; Index++) {
      xil_printf("\nData %d: %d\r\n", Index + 1, (unsigned int)RxPacket[Index]);
  }

  return XST_SUCCESS;
}


int seperate()
{
	for(i = 1; i <= NUMTEST; i++)
		for(j = 1; j <= NUMIN; j++)
		{
			Test_input1[i][j] = Test_input[i][j] * 256;
		}

	for (i = 0; i <= NUMIN; i++)
		for (j = 1; j <= NUMHID; j++)
		{
			WeightIH1[i][j] = WeightIH[i][j] * 256;
			//printf("WeightIH [%d,%d]  %.4f   ", i, j, WeightIH[i][j]);
			//printf("WeightIH1 [%d,%d]  %d\n", i, j, WeightIH1[i][j]);
		}
	for (k = 1; k <= NUMOUT; k++)
		for (j = 0; j <= NUMHID; j++)
		{
			//printf("WeightHO [%d,%d]  %.4f   ", j, k, WeightHO[j][k]);
			WeightHO1[j][k] = WeightHO[j][k] * 256;
			//printf("WeightHO1 [%d,%d]  %d\n", j, k, WeightHO1[j][k]);
		}
}
