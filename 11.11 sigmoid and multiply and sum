module myip_v1_0 
(
    // DO NOT EDIT BELOW THIS LINE ////////////////////
    ACLK,
    ARESETN,
    S_AXIS_TREADY,
    S_AXIS_TDATA,
    S_AXIS_TLAST,
    S_AXIS_TVALID,
    M_AXIS_TVALID,
    M_AXIS_TDATA,
    M_AXIS_TLAST,
    M_AXIS_TREADY
    // DO NOT EDIT ABOVE THIS LINE ////////////////////
  );

input                          ACLK;    // Synchronous clock
input                          ARESETN; // System reset, active low
// slave in interface
output                         S_AXIS_TREADY;  // Ready to accept data in
input   signed    [31 : 0]     S_AXIS_TDATA;   // Data in
input                          S_AXIS_TLAST;   // Optional data in qualifier
input                          S_AXIS_TVALID;  // Data in is valid
// master out interface
output                         M_AXIS_TVALID;  // Data out is valid
output  signed   [31 : 0]      M_AXIS_TDATA;   // Data Out
output                         M_AXIS_TLAST;   // Optional data out qualifier
input                          M_AXIS_TREADY;  // Connected slave device is ready to accept data out
    
   // number of data
   localparam FP = 4; 

   // Total number of input data.
   localparam NUMBER_OF_INPUT_WORDS  = FP;

   // Total number of output data
   localparam NUMBER_OF_OUTPUT_WORDS = FP;

   // Define the states of state machine
   localparam Idle  = 4'b0001;
   localparam Read_Inputs = 4'b0010;
   localparam Compute = 4'b0100;
   localparam Write_Outputs  = 4'b1000;
   reg [3:0] state;

   // Accumulator to hold sum of inputs read at any point in time

   reg sign;                // 31th
   reg signed [31:0] int;          // 30th to 16th
   reg signed [31:0] dec;          // 15:0
   reg signed [31:0] rx_tmp[0:10][0:13];
   reg signed [31:0] tx_tmp[0:10][0:13];   
   wire signed [31:0] value;

   assign value = tx_tmp[node_count][count];

   reg done;
   reg [3:0] node_count;
   reg [3:0] count;
   reg [3:0] max_cnt;
   reg [3:0] max_node;

   function signed [31:0] Multiply;
    input signed [31:0] a;
    input signed [31:0] b;
    begin
    Multiply = a * b / 1024;
    end
  endfunction

  function signed [31:0] Sum;
    input signed [31:0] a;
    input signed [31:0] b;

    begin
      Sum = a + b;
    end
  endfunction


function signed [31:0] Sigmoid_PLAN;
      input signed [31:0] a;

      begin
        if (a > 5120)          // 5<a assign 1
          Sigmoid_PLAN = 1024;
        else if (a > 2432)     //  2.375<a<=5 assign 0.03125a + 0.84375
          Sigmoid_PLAN = (a / 32)  + 864;
        else if (a > 1024)     //  1<a<=2.375 assign 0.125a + 0.625
          Sigmoid_PLAN = (a / 8) + 640;
        else if (a > -1024)    // -1<a<=1 assign 0.25a + 0.5
          Sigmoid_PLAN = (a / 4) + 512;
        else if (a > -2432)    //  -2.375<a<=-1 assign 0.125a + 0.375
          Sigmoid_PLAN = (a / 8) + 384;
        else if(a > - 5120)   //  -5<a<=-2.375 assign 0.03125a + 0.15625
          Sigmoid_PLAN = (a / 32)  + 160;
        else                  //   a<=-5 assign 0
          Sigmoid_PLAN = 0;
      end
    endfunction



   reg [NUMBER_OF_INPUT_WORDS - 1:0] nr_of_reads;
   reg [NUMBER_OF_OUTPUT_WORDS - 1:0] nr_of_writes;

   // CAUTION:
   // The sequence in which data are read in should be
   // consistent with the sequence they are written

   assign S_AXIS_TREADY = (state == Read_Inputs);
   assign M_AXIS_TVALID = (state == Write_Outputs);
   assign M_AXIS_TLAST = (state == Write_Outputs) & (nr_of_writes == 0);

   assign M_AXIS_TDATA = M_AXIS_TVALID ? value : 0;

   always @(posedge ACLK) 
   begin
      /****** Synchronous reset (active low) ******/
      if (!ARESETN)
        begin
           // CAUTION: make sure your reset polarity is consistent with the
           // system reset polarity
           state        <= Idle;
           nr_of_reads  <= 0;
           nr_of_writes <= 0;
        end
      /************** state machines **************/
      else
        case (state)

          Idle:
            if (S_AXIS_TVALID == 1)
            begin
              state       <= Read_Inputs;
              nr_of_reads <= NUMBER_OF_INPUT_WORDS - 1;
              count <= 0;
              node_count <= 0;
              done <= 0;
            end

          Read_Inputs:
            if (S_AXIS_TVALID == 1) 
            begin
              if (nr_of_reads == 0) 
              begin
                state <= Compute;
                nr_of_writes <= NUMBER_OF_OUTPUT_WORDS - 1;
                rx_tmp[node_count][count] <= S_AXIS_TDATA;
                max_cnt <= count;
                max_node <= node_count;
              end
              else 
              begin
                rx_tmp[node_count][count] <= S_AXIS_TDATA;
                count <= count + 1;
                nr_of_reads <= nr_of_reads - 1;
              end
            end

          Write_Outputs:
            if (M_AXIS_TREADY == 1) 
            begin
              if (nr_of_writes == 0)
              begin
                state <= Idle;                   
              end
              else begin
                nr_of_writes <= nr_of_writes - 1;
                count <= count + 1;
                if (count == max_cnt)
                begin
                  count <= 0;
                  node_count <= node_count + 1;
                end
              end      
            end

          Compute:
          begin
            if (done != 1) 
            begin
              tx_tmp[0][0] <= Multiply(rx_tmp[0][0], rx_tmp[0][1]);
              tx_tmp[0][1] <= Sum(rx_tmp[0][0], rx_tmp[0][1]);
              tx_tmp[0][2] <= Sigmoid_PLAN(rx_tmp[0][0]);
              tx_tmp[0][3] <= Sigmoid_PLAN(rx_tmp[0][1]);
              
              count <= 0;

              if ((count == 0) && (node_count == 0))
              begin
                done <= 1;
              end
            end

            else 
            begin
              state <= Write_Outputs;
            end
          end

        endcase
   end
endmodule
